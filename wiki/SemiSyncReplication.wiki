#summary Semi-synchronous replication

= Introduction =

Heikki Tuuri worked on this first, but the community didn't demand it. Solid will offer their version of this later in 2007.

The MySQL replication protocol is asynchronous. The master does not know when or whether a slave gets replication events. It is also efficient. A slave requests all replication events from an offset in a file. The master pushes events to the slave when they are ready.

= Usage =

We have extended the replication protocol to be semi-synchronous on demand. It is on demand because each slave registers as *async* or *semi-sync*. When semi-sync is enabled on the master, it blocks return from commit until either at least one semi-sync slave acknowledges receipt of all replication events for the transaction or until a configurable timeout expires.

The following parameters control this:
  * *rpl_semi_sync_enabled* configures a master to use semi-sync replication.
  * *rpl_semi_sync_slave_enabled* configures a slave to use semi-sync replication
  * *rpl_semi_sync_timeout* is the timeout in milliseconds for the master

= Implementation =

Each replication event sent to a semi-sync slave has two extra bytes at the start that indicate whether the event requires acknowledgement. The bytes are stripped by the slave IO thread and the rest of the event is processed as normal. When acknowledgement is requested, the slave IO thread responds using the existing connection to the master. Acknowledgement is requested for events that indicate the end of a transaction, such as commit or an insert with autocommit enabled.